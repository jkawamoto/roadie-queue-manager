// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x7f\x6f\xdb\x36\x10\xfd\x5f\x9f\xe2\xc1\x06\x8a\x16\x48\xec\xa4\xc3\x36\xa0\x6b\x83\xb9\xb1\x93\x6a\x4d\xe4\x40\x96\x57\x04\x49\x10\xd0\xd4\x49\xe2\x4a\x93\x1c\x79\xb4\xa1\x19\xfe\xee\x83\x94\x34\x4d\x87\xa2\xfb\x4f\x77\xbc\x1f\xef\xdd\xbb\xd3\x30\x19\x62\x6a\xe5\x67\xf2\x95\xd2\x94\x74\xe6\xa9\x75\xad\x57\x75\xc3\x78\x29\x5f\xe1\xf5\xd1\xf1\x2f\x87\xaf\x8f\x8e\x7f\xc5\x1f\xd1\x38\x52\xf8\x28\xb6\x62\x6d\xd9\xf6\xb1\x45\xa3\x02\xba\x4c\xa8\x00\x27\x3c\xc3\x56\xc8\xad\x28\x15\xe1\xef\x48\x91\xb0\x16\x46\xd4\xe4\x47\x7d\xf8\xf7\x5e\xba\xcc\xca\x13\x21\xd8\x8a\xb7\xc2\xd3\x1b\xb4\x36\x42\x0a\x03\x4f\xa5\x0a\xec\xd5\x2a\x32\x41\x31\x84\x29\xc7\xd6\x63\x6d\x4b\x55\xb5\xc9\xb0\x73\x45\x53\x92\x07\x37\x04\x26\xbf\x0e\x5d\xfb\xce\x38\xcf\x96\x38\x27\x43\x5e\x68\x5c\xc5\x95\x56\x12\x17\x4a\x92\x09\x04\x11\xe0\x3a\x4f\x68\xa8\xc4\xaa\x2b\xd3\x25\x9c\x75\x08\x16\x8f\x08\x70\x66\xa3\x29\x05\x2b\x6b\x0e\x40\x8a\x1b\xf2\xd8\x90\x0f\xca\x1a\xfc\xf4\xa5\xc5\x63\xbd\x03\x58\x9f\x0c\xf1\x52\x70\x07\xdb\xc3\xba\x2e\xed\x15\x84\x69\xa1\x05\x7f\xcd\xfc\xf1\x04\xbe\x12\x2d\xa1\x4c\xdf\xa0\xb1\x8e\xc0\x8d\xe0\x8e\xe7\x56\x69\x8d\x15\x21\x06\xaa\xa2\x3e\x48\x86\x58\x45\xc6\xa7\xb4\xf8\x30\x5f\x16\x98\x64\xd7\xf8\x34\xc9\xf3\x49\x56\x5c\xff\x86\xad\xe2\xc6\x46\x06\x6d\xe8\xa1\x92\x5a\x3b\xad\xa8\xc4\x56\x78\x2f\x0c\xb7\xb0\x55\x32\xc4\xe5\x2c\x3f\xfd\x30\xc9\x8a\xc9\xfb\xf4\x22\x2d\xae\x61\x3d\xce\xd2\x22\x9b\x2d\x16\x38\x9b\xe7\x98\xe0\x6a\x92\x17\xe9\xe9\xf2\x62\x92\xe3\x6a\x99\x5f\xcd\x17\xb3\x11\xb0\xa0\x0e\x14\x25\xc3\x1f\xcd\xb8\xea\x55\xf2\x84\x92\x58\x28\x1d\x1e\xb8\x5f\xdb\x88\xd0\xd8\xa8\x4b\x34\x62\x43\xf0\x24\x49\x6d\xa8\x84\x80\xb4\xae\xfd\x7f\xed\x92\x21\x84\xb6\xa6\xee\x19\x7e\x7f\xcd\x90\x56\x30\x96\x0f\x10\x88\xf0\xb6\x61\x76\x6f\xc6\xe3\xed\x76\x3b\xaa\x4d\x1c\x59\x5f\x8f\xf5\x43\xa9\x30\x3e\xe9\x40\x7d\x59\x61\xa6\xb5\xeb\xd4\xea\xa4\x10\x28\x9f\x0e\x02\xdb\x46\xc9\x06\xca\x04\x16\x5a\x07\x08\xc7\x70\x42\x7e\x16\x35\xf5\xa4\xce\xf2\xf9\x25\x76\xbb\x51\xba\x16\x35\xed\xf7\xc9\xe5\x24\xcd\x8a\x49\x9a\xcd\xf2\xff\x9e\x0b\xde\x7e\x7e\xfc\x1a\xfd\xd5\xbf\xfc\x5e\xaf\x85\xd2\x23\x69\xd7\x27\x49\x32\xcb\xfe\x44\x31\xcb\x2f\xb1\xe1\xe3\xa3\xa3\xde\x9c\xce\xde\xa7\x93\xec\xfe\x2c\x9f\x67\xc5\x2c\x9b\xc2\x58\xa3\x0c\x93\x17\x92\xd5\x86\x3a\xe4\xe9\x03\x2a\x18\x92\x14\x82\xf0\xed\x13\xb4\x24\x5f\x66\x1d\xd6\xc3\x9a\x18\xd1\x95\x1d\xb3\x17\x2f\x70\x9b\x00\x78\xf2\x3f\x92\xc2\x61\xdb\xbb\x22\x2b\x1d\x20\xa3\xd7\xa8\x15\xa3\x96\x12\xae\xe5\xc6\x9a\xc3\x92\x36\x5f\x3e\x03\x71\x74\x6c\xad\x0e\xd0\x6a\x15\x82\xee\x1f\xb5\x5a\x55\x95\x7a\x1e\xe7\x94\x43\x34\xff\x28\xd7\x23\xe9\xac\xa7\x6e\xcb\xde\x74\xad\xf4\xad\x63\x0b\xd7\xce\x1d\x99\xc5\xe2\x02\xd2\xcb\xb5\x2d\x51\x87\x0e\x49\x9f\x47\xb2\xb1\x18\xdc\x9c\x5b\x5b\x6b\x3a\xb5\x6b\x17\x99\xee\x6e\x4d\x20\xbf\x51\x92\xee\x85\x94\x36\x1a\xc6\x3b\x94\x54\x89\xa8\xf9\xd6\xdc\x9c\x2f\x96\xac\xf4\xdd\xad\x71\xc2\x0b\xad\x49\xdf\x4b\xbb\x76\x36\x28\xa6\xfb\xe8\xb4\x15\xe5\x3d\x37\x9e\x42\x63\x75\x89\x77\x38\xfe\xf9\xe8\x72\x80\x93\x13\x8c\x89\xe5\x78\xd5\xa9\x23\xab\xfa\xf9\x70\x9f\x2b\x8e\xe0\x48\xaa\x4a\x7d\xbd\xd1\x20\xbd\x72\xfc\xf0\x07\x64\xdb\x1d\xa8\x8f\x66\x94\xec\x76\x5e\x98\x9a\x30\x9a\x5c\x15\xfb\xfd\x37\x6a\x3c\x9b\xfa\x6e\x37\xda\xef\x93\xdd\x8e\x4c\xb9\xdf\x27\xc9\xa7\x79\xfe\x71\x9a\xe6\x18\x97\x82\x45\x32\x99\x4e\x31\xf2\xfd\x8a\x8f\xc9\xb0\x6f\x9d\x55\x86\x47\xa1\xc1\xd8\x5b\xcb\xdf\xfa\x92\x59\x56\xe4\xd7\x57\xf3\x34\x2b\x70\x33\x58\x89\xd0\x0c\x0e\x30\xf8\x4e\xe0\xe0\x2e\x39\xbd\x9c\xe2\x66\x30\xb8\x4b\xfe\x0d\x00\x00\xff\xff\x15\xf9\xcc\x69\xfb\x05\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\x5b\x4f\x1b\x47\x14\xc7\xdf\xf7\x53\xfc\x83\xad\x04\x2a\x76\x1d\xd2\x87\x4a\xa4\xa0\xba\x0e\x10\xb7\x2e\x41\xb6\x51\x44\xa3\x28\x1a\xef\x9e\xdd\x1d\x65\x3c\x33\x99\x0b\xc6\x6c\xfd\xdd\xab\xd9\x5d\x5f\x20\x88\x56\x7d\xea\x13\xcc\x99\x73\x7e\xe7\xf2\x3f\x9e\xed\xbc\xe8\xcd\xb8\xec\xcd\x98\x2d\xa3\x4e\xd4\x01\x49\x67\x96\x5a\x71\xe9\x92\xd6\x32\x50\x7a\x69\x78\x51\x3a\xec\xa7\x07\x78\xf3\xfa\xe8\x27\xfc\xe6\xa5\x26\x8e\xdf\xd9\x82\xcd\x95\x53\xb5\xdb\xb4\xe4\x16\x39\x17\x04\x6e\xa1\x99\x71\x50\x39\xc6\x8a\x65\x9c\xf0\xcd\x93\x27\xcc\x99\x64\x05\x99\xa4\x76\x7f\xea\x26\x44\xe6\x86\x08\x56\xe5\x6e\xc1\x0c\x1d\x63\xa9\x3c\x52\x26\x61\x28\xe3\xd6\x19\x3e\xf3\x8e\xc0\x1d\x98\xcc\x7a\xca\x60\xae\x32\x9e\x2f\xa3\x4e\x30\x79\x99\x91\x81\x2b\x09\x8e\xcc\xdc\x86\xf4\xe1\x70\x71\x79\x8d\x0b\x92\x64\x98\xc0\x95\x9f\x09\x9e\x62\xc4\x53\x92\x96\xc0\x2c\x74\xb0\xd8\x92\x32\xcc\x02\x26\x04\x9c\x87\x0a\x26\x6d\x05\x38\x57\x5e\x66\xcc\x71\x25\x0f\x41\xdc\x95\x64\x70\x4b\xc6\x72\x25\xf1\xe3\x3a\x45\xcb\x3b\x84\x32\x51\x07\xfb\xcc\x85\xb2\x0d\x94\x0e\x61\x07\x60\x72\x09\xc1\xdc\x36\xf2\xf9\x09\x6c\x1b\xcd\xc0\x65\x9d\xa0\x54\x9a\xe0\x4a\xe6\x42\x9f\x0b\x2e\x04\x66\x04\x6f\x29\xf7\xe2\x30\xea\x60\xe6\x1d\x3e\x0e\xa7\xef\x3f\x5c\x4f\xd1\xbf\xbc\xc1\xc7\xfe\x78\xdc\xbf\x9c\xde\xbc\xc5\x82\xbb\x52\x79\x07\xba\xa5\x86\xc4\xe7\x5a\x70\xca\xb0\x60\xc6\x30\xe9\x96\x50\x79\xd4\xc1\x1f\x67\xe3\xc1\xfb\xfe\xe5\xb4\xff\xeb\x70\x34\x9c\xde\x40\x19\x9c\x0f\xa7\x97\x67\x93\x09\xce\x3f\x8c\xd1\xc7\x55\x7f\x3c\x1d\x0e\xae\x47\xfd\x31\xae\xae\xc7\x57\x1f\x26\x67\x09\x30\xa1\x50\x14\x45\x9d\xe7\x66\x9c\xd7\x2a\x19\x42\x46\x8e\x71\x61\x9b\xde\x6f\x94\x87\x2d\x95\x17\x19\x4a\x76\x4b\x30\x94\x12\xbf\xa5\x0c\x0c\xa9\xd2\xcb\x7f\xd6\x2e\xea\x80\x09\x25\x8b\xba\xc3\xa7\xd7\x0c\xc3\x1c\x52\xb9\x43\x58\x22\xfc\x5c\x3a\xa7\x8f\x7b\xbd\xc5\x62\x91\x14\xd2\x27\xca\x14\x3d\xd1\xa0\x6c\xef\x34\x14\xb5\x5e\x61\x47\x73\x1d\xd4\x0a\x52\x30\xb9\xf3\x7b\x08\x45\x31\x64\x2a\xfd\x4a\x06\xa9\x92\x8e\x71\x19\x16\x4e\x81\xee\x28\x0d\x7b\x69\xbc\x84\x75\xa4\xeb\x26\x79\x8e\x4f\x9f\xd0\xed\xe0\xc5\x09\x5e\xe3\xf3\xe7\xb7\xa1\x23\x19\xa1\xf6\x46\xf7\x97\x28\xe7\x51\x44\x77\xce\xb0\xd4\x7d\xb9\xe7\x7a\xff\xa0\x0a\x97\x69\xa9\xb0\x77\x2d\xef\xb9\xd6\x5c\x16\xe8\x1e\xed\x45\x80\x0f\x67\xc4\x0a\x71\x86\xee\x7e\xc6\x8d\x64\x73\x42\xf7\xe8\x00\xdd\xa3\x08\x30\xf3\xf0\x77\x15\x45\x5e\x6a\x96\x7e\xfd\xe2\x98\x29\xee\x1f\xf2\x82\x7d\xcb\xeb\xee\xa7\x8f\x41\x2f\x5f\xc2\x31\x83\xf8\xfe\xee\x36\x0f\x86\xa7\xb1\xff\x11\xfa\x04\xb3\xaa\x6a\xe5\x92\x0b\xee\x56\xab\x0d\x73\x20\x94\x0c\xc4\x82\x3b\x18\xd2\xca\x72\xa7\xcc\x12\x55\x95\xac\x56\x21\x47\xb0\xa7\x42\x49\x6a\x4c\x48\xa2\xaa\x22\x99\xad\x6a\xa0\x61\xb2\x20\x24\xef\xd4\x42\x0a\xc5\x32\xbb\xc3\x5d\xdb\x02\xbb\xaa\x92\x89\x49\x1b\x5e\x2b\xd2\x7e\xea\x8d\x40\x3c\x44\xfc\x1e\xaf\xfa\x69\x4a\xda\xc5\x67\x32\x55\xc1\xff\x18\xc5\x3d\xd7\x87\x19\xe5\x61\x2b\x5e\x6d\xc2\xf1\xe6\xb4\x97\xd1\x6d\x4f\x7a\x21\xf0\x17\x0a\x43\x1a\x7b\x03\x25\x1d\xc9\x6d\xf0\xde\xe6\x26\x40\xc2\x69\x91\x22\x16\x07\x38\x39\xc1\xd1\xee\x52\x00\x4d\x09\xa3\xa0\x72\xcf\xcd\x75\x2f\x04\x68\xca\xea\x17\x75\x9d\xb3\x76\x2c\xea\x5d\xc8\xd2\x1d\xb7\xb5\xdf\x69\xf0\x7c\x47\xb6\x1d\xa9\xb0\xf4\x18\xbd\xb9\xdf\x65\xe6\x3c\x02\xaa\x8a\xe7\x48\xfe\xe4\xba\x4d\xb3\xb3\x9a\x0f\xa8\x55\x15\xb8\x61\x72\xc9\x94\x99\x8b\xfb\xd6\x7d\x77\xf5\x9e\xf1\xff\xce\xfb\xb1\x6f\x2d\xe6\xf7\xa2\x5e\x4c\xce\xb9\xa0\x7f\x23\x69\x61\xbd\xe3\x02\xa9\xde\x2a\xf5\x30\xc5\xff\xb0\xcd\x66\x0d\xe3\xf0\x0e\x7e\xf3\xdc\xd0\x9c\xa4\xb3\x89\xbb\x73\x0f\xde\x8d\xba\xed\xa1\xb4\x8e\x09\x11\xba\x6e\x9d\x33\xe8\xa5\x2b\x95\x44\xc8\xc5\x0a\xb2\xc8\x28\xe7\xb2\xf9\x7a\x3c\x06\x86\x09\x69\xae\xc1\x1b\x0c\xe2\x98\xee\xb8\x75\x36\x66\x69\xf8\x58\x81\x23\x36\xdf\x05\xb5\x4f\x95\x56\xc6\x61\x34\xf8\xd2\x1f\x8d\x4e\x06\x1b\x69\xba\x5c\x66\x74\x77\x88\x2e\x89\x26\x02\xc7\x27\x48\xc6\x5e\xae\x56\x51\x53\x72\xfb\xeb\xb5\x25\xe2\x74\x7d\xc2\x69\xb3\xbe\xd6\x65\xca\xbb\xaa\x6a\x28\xab\x55\x9d\x6e\x33\x97\xf6\xa1\xd1\x6b\x9d\x1b\x6f\xbb\x17\x55\x55\xd7\x90\xf5\xc2\x35\xc9\xea\x7f\x57\xab\xa8\xd5\x3e\x9e\x07\xf9\xf7\x76\x12\xfc\x50\xf7\x8e\x4d\x58\x3d\xfc\x76\xb5\x1a\xfc\xee\x6a\x6d\x13\x6e\x1f\x9e\x07\xe4\xb6\x87\x87\xb8\xa6\xe6\xbf\x03\x00\x00\xff\xff\x99\xe3\xc0\x99\x50\x09\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

