// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x71\x6f\xdb\xb6\x13\xfd\x5f\x9f\xe2\xc1\x06\x8a\x16\x48\xe4\xa4\x3f\xfc\x36\xa0\x6b\x83\xa9\xb1\x9d\x6a\xad\x65\x43\x96\x57\x04\x49\x10\xd0\xd4\x49\xe2\x4a\x93\x1c\x79\xb2\x61\x18\xfe\xee\x83\x94\xb4\x69\x87\xa0\xfb\x4f\x77\xe4\xbd\x7b\xef\x1d\x4f\xc3\x68\x88\xb1\x95\x5f\xc8\x57\x4a\x53\xd4\x85\x97\xd6\xed\xbd\xaa\x1b\xc6\x4b\xf9\x0a\xaf\xcf\xce\x7f\x39\x7d\x7d\x76\xfe\x2b\xfe\x68\x8d\x23\x85\x8f\x62\x27\x36\x96\x6d\x7f\xb7\x68\x54\x40\x57\x09\x15\xe0\x84\x67\xd8\x0a\xb9\x15\xa5\x22\xfc\xdd\x52\x4b\xd8\x08\x23\x6a\xf2\x71\x7f\xfd\xb9\x93\xae\xb2\xf2\x44\x08\xb6\xe2\x9d\xf0\xf4\x06\x7b\xdb\x42\x0a\x03\x4f\xa5\x0a\xec\xd5\xba\x65\x82\x62\x08\x53\x8e\xac\xc7\xc6\x96\xaa\xda\x47\xc3\x2e\xd5\x9a\x92\x3c\xb8\x21\x30\xf9\x4d\xe8\xda\x77\xc1\x55\xb6\xc2\x15\x19\xf2\x42\x63\xd1\xae\xb5\x92\xf8\xa4\x24\x99\x40\x10\x01\xae\xcb\x84\x86\x4a\xac\x3b\x98\xae\x60\xda\x31\x58\x3e\x32\xc0\xd4\xb6\xa6\x14\xac\xac\x39\x01\x29\x6e\xc8\x63\x4b\x3e\x28\x6b\xf0\xbf\xaf\x2d\x1e\xf1\x4e\x60\x7d\x34\xc4\x4b\xc1\x1d\x6d\x0f\xeb\xba\xb2\x57\x10\x66\x0f\x2d\xf8\xa9\xf2\xe7\x0e\x3c\x09\x2d\xa1\x4c\xdf\xa0\xb1\x8e\xc0\x8d\xe0\x4e\xe7\x4e\x69\x8d\x35\xa1\x0d\x54\xb5\xfa\x24\x1a\x62\xdd\x32\x3e\xa7\xc5\x87\xf9\xaa\x40\x92\x5d\xe3\x73\x92\xe7\x49\x56\x5c\xff\x86\x9d\xe2\xc6\xb6\x0c\xda\xd2\x03\x92\xda\x38\xad\xa8\xc4\x4e\x78\x2f\x0c\xef\x61\xab\x68\x88\xd9\x24\xbf\xfc\x90\x64\x45\xf2\x3e\xfd\x94\x16\xd7\xb0\x1e\xd3\xb4\xc8\x26\xcb\x25\xa6\xf3\x1c\x09\x16\x49\x5e\xa4\x97\xab\x4f\x49\x8e\xc5\x2a\x5f\xcc\x97\x93\x18\x58\x52\x47\x8a\xa2\xe1\xcf\x3c\xae\xfa\x29\x79\x42\x49\x2c\x94\x0e\x0f\xda\xaf\x6d\x8b\xd0\xd8\x56\x97\x68\xc4\x96\xe0\x49\x92\xda\x52\x09\x01\x69\xdd\xfe\xbf\x67\x17\x0d\x21\xb4\x35\x75\xaf\xf0\xf9\x67\x86\xb4\x82\xb1\x7c\x82\x40\x84\xb7\x0d\xb3\x7b\x33\x1a\xed\x76\xbb\xb8\x36\x6d\x6c\x7d\x3d\xd2\x0f\x50\x61\x74\xd1\x91\xfa\xfa\x84\x99\x36\xae\x9b\x56\x37\x0a\x81\xf2\xdb\x42\x60\xd7\x28\xd9\x40\x99\xc0\x42\xeb\x00\xe1\x18\x4e\xc8\x2f\xa2\xa6\x5e\xd4\x34\x9f\xcf\x70\x38\xc4\xe9\x46\xd4\x74\x3c\x46\xb3\x24\xcd\x8a\x24\xcd\x26\xf9\xbf\xd7\x05\x6f\xbf\x3c\x7e\xc5\x7f\xf5\x27\xbf\xd7\x1b\xa1\x74\x2c\xed\xe6\x22\x8a\x26\xd9\x9f\x28\x26\xf9\x0c\x5b\x3e\x3f\x3b\xeb\xc3\xf1\xe4\x7d\x9a\x64\xf7\xd3\x7c\x9e\x15\x93\x6c\x0c\x63\x8d\x32\x4c\x5e\x48\x56\x5b\xea\x98\xa7\x0f\xac\x60\x48\x52\x08\xc2\xef\xbf\x51\x8b\xf2\x55\xd6\x71\x3d\xad\x89\xd1\xba\xb2\x53\xf6\xe2\x05\x6e\x23\x00\xdf\xf2\x8f\xa2\x70\xba\xef\x53\x2d\x2b\x1d\x20\x5b\xaf\x51\x2b\x46\x2d\x25\xdc\x9e\x1b\x6b\x4e\x4b\xda\x42\xab\x75\x55\xa9\xfe\xf3\x31\xeb\x94\xeb\xdb\x38\xe5\x9e\xa0\x56\x7d\x58\x87\x0e\xac\x3f\x25\xd9\x58\x0c\x6e\xae\xac\xad\x35\x5d\xda\x8d\x6b\x99\xee\x6e\x4d\x20\xbf\x55\x92\xee\x85\x94\xb6\x35\x8c\x77\x28\xa9\x12\xad\xe6\x5b\x73\x73\xb5\x5c\xb1\xd2\x77\xb7\xc6\x09\x2f\xb4\x26\x7d\x2f\xed\xc6\xd9\xa0\x98\xee\x5b\xa7\xad\x28\xef\xb9\xf1\x14\x1a\xab\x4b\xbc\xc3\xf9\xff\xcf\x66\x03\x5c\x5c\x60\x44\x2c\x47\xeb\xce\x60\x59\xd5\xdf\xfb\xf3\xfd\xd0\x10\x1c\x49\x55\xa9\xa7\x35\x0b\xd2\x2b\xc7\x0f\x3f\x31\xb6\xdd\x8e\xf9\xd6\xc4\xd1\xe1\xe0\x85\xa9\x09\x71\xb2\x28\x8e\xc7\x1f\x0c\xfd\xce\xb8\xc3\x21\x3e\x1e\xa3\xc3\x81\x4c\x79\x3c\x46\xd1\xe7\x79\xfe\x71\x9c\xe6\x18\x95\x82\x45\x94\x8c\xc7\x88\x7d\xff\x4a\x47\x64\xd8\xef\x9d\x55\x86\xe3\xd0\x60\xe4\xad\xe5\x1f\x73\xd1\x24\x2b\xf2\xeb\xc5\x3c\xcd\x0a\xdc\x0c\xd6\x22\x34\x83\x13\x0c\x9e\xb9\x38\xb8\x8b\x2e\x67\x63\xdc\x0c\x06\x77\xd1\x3f\x01\x00\x00\xff\xff\xc3\x2d\x87\x95\xbe\x05\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x5d\x6f\xdb\x36\x14\x7d\xd7\xaf\x38\x8d\x8d\x36\x19\x22\xb9\xe9\x1e\x06\xa4\x4b\x30\xcf\x4d\x52\x6f\x5e\x1a\xd8\x0e\x8a\xac\x28\x0a\x5a\xba\x92\x88\xd2\x24\xcb\x8f\x38\x8e\xe6\xff\x3e\x50\x92\x3f\x92\x06\xd9\xb0\xa7\x3d\xd9\xbc\x3c\xf7\xdc\x8f\x73\x75\xd9\x79\xd1\x9b\x71\xd9\x9b\x31\x5b\x46\x9d\xa8\x03\x92\xce\x2c\xb5\xe2\xd2\x25\xad\x65\xa0\xf4\xd2\xf0\xa2\x74\xd8\x4f\x0f\xf0\xe6\xf5\xd1\x4f\xf8\xcd\x4b\x4d\x1c\xbf\xb3\x05\x9b\x2b\xa7\x6a\xd8\xb4\xe4\x16\x39\x17\x04\x6e\xa1\x99\x71\x50\x39\xc6\x8a\x65\x9c\xf0\xcd\x93\x27\xcc\x99\x64\x05\x99\xa4\x86\x3f\x75\x13\x3c\x73\x43\x04\xab\x72\xb7\x60\x86\x8e\xb1\x54\x1e\x29\x93\x30\x94\x71\xeb\x0c\x9f\x79\x47\xe0\x0e\x4c\x66\x3d\x65\x30\x57\x19\xcf\x97\x51\x27\x98\xbc\xcc\xc8\xc0\x95\x04\x47\x66\x6e\x43\xf8\x70\xb8\xb8\xbc\xc6\x05\x49\x32\x4c\xe0\xca\xcf\x04\x4f\x31\xe2\x29\x49\x4b\x60\x16\x3a\x58\x6c\x49\x19\x66\x81\x26\x38\x9c\x87\x0c\x26\x6d\x06\x38\x57\x5e\x66\xcc\x71\x25\x0f\x41\xdc\x95\x64\x70\x4b\xc6\x72\x25\xf1\xe3\x3a\x44\xcb\x77\x08\x65\xa2\x0e\xf6\x99\x0b\x69\x1b\x28\x1d\xdc\x0e\xc0\xe4\x12\x82\xb9\xad\xe7\xf3\x1d\xd8\x16\x9a\x81\xcb\x3a\x40\xa9\x34\xc1\x95\xcc\x85\x3a\x17\x5c\x08\xcc\x08\xde\x52\xee\xc5\x61\xd4\xc1\xcc\x3b\x7c\x1c\x4e\xdf\x7f\xb8\x9e\xa2\x7f\x79\x83\x8f\xfd\xf1\xb8\x7f\x39\xbd\x79\x8b\x05\x77\xa5\xf2\x0e\x74\x4b\x0d\x13\x9f\x6b\xc1\x29\xc3\x82\x19\xc3\xa4\x5b\x42\xe5\x51\x07\x7f\x9c\x8d\x07\xef\xfb\x97\xd3\xfe\xaf\xc3\xd1\x70\x7a\x03\x65\x70\x3e\x9c\x5e\x9e\x4d\x26\x38\xff\x30\x46\x1f\x57\xfd\xf1\x74\x38\xb8\x1e\xf5\xc7\xb8\xba\x1e\x5f\x7d\x98\x9c\x25\xc0\x84\x42\x52\x14\x75\x9e\xeb\x71\x5e\xab\x64\x08\x19\x39\xc6\x85\x6d\x6a\xbf\x51\x1e\xb6\x54\x5e\x64\x28\xd9\x2d\xc1\x50\x4a\xfc\x96\x32\x30\xa4\x4a\x2f\xff\x59\xbb\xa8\x03\x26\x94\x2c\xea\x0a\x9f\x1e\x33\x0c\x73\x48\xe5\x0e\x61\x89\xf0\x73\xe9\x9c\x3e\xee\xf5\x16\x8b\x45\x52\x48\x9f\x28\x53\xf4\x44\x43\x65\x7b\xa7\x21\xa9\xf5\x08\x3b\x9a\xeb\xa0\x56\x90\x82\xc9\x9d\xef\x21\x24\xc5\x90\xa9\xf4\x2b\x19\xa4\x4a\x3a\xc6\x65\x18\x38\x05\xba\xa3\x34\xcc\xa5\xf1\x12\xd6\x91\xae\x8b\xe4\x39\x3e\x7d\x42\xb7\x83\x17\x27\x78\x8d\xcf\x9f\xdf\x86\x8a\x64\x84\x1a\x8d\xee\x2f\x51\xce\xa3\x88\xee\x9c\x61\xa9\xfb\x72\xcf\xf5\xfe\x41\x15\x2e\xd3\x52\x61\xef\x5a\xde\x73\xad\xb9\x2c\xd0\x3d\xda\x8b\x00\x1f\xce\x88\x15\xe2\x0c\xdd\xfd\x8c\x1b\xc9\xe6\x84\xee\xd1\x01\xba\x47\x11\x60\xe6\xe1\x77\x15\x45\x5e\x6a\x96\x7e\xfd\xe2\x98\x29\xee\x1f\xf2\x05\xfb\x96\xaf\xbb\x9f\x3e\x26\x7a\xf9\x12\x8e\x19\xc4\xf7\x77\xb7\x79\x30\x3c\x4d\xfb\x1f\x49\x9f\xe0\xac\xaa\x5a\xb9\xe4\x82\xbb\xd5\x6a\xc3\x39\x10\x4a\x06\xc6\x82\x3b\x18\xd2\xca\x72\xa7\xcc\x12\x55\x95\xac\x56\x21\x46\xb0\xa7\x42\x49\x6a\x4c\x48\xa2\xaa\x22\x99\xad\x6a\x42\xc3\x64\x41\x48\xde\xa9\x85\x14\x8a\x65\x76\x87\x77\x6d\x0b\xdc\x55\x95\x4c\x4c\xda\xf0\xd5\x22\x75\xf7\x53\x6f\x04\xe2\x21\xe2\xf7\x78\xd5\x4f\x53\xd2\x2e\x3e\x93\xa9\x0a\xf0\x63\x14\xf7\x5c\x1f\x66\x94\x87\xa1\x78\xb5\xf1\xc6\x9b\xd3\x5e\x46\xb7\x3d\xe9\x85\xc0\x5f\x28\x0c\x69\xec\x0d\x94\x74\x24\xb7\xce\x7b\x9b\x9b\x40\x12\x4e\x8b\x14\xb1\x38\xc0\xc9\x09\x8e\x76\x46\x02\x68\x32\x18\x05\x8d\x7b\x6e\xae\x7b\x01\xaf\x29\xab\xf7\xe9\x3a\x64\x0d\x2c\xea\x49\xc8\xd2\x1d\xd8\x1a\x77\x1a\x90\xef\xc8\xb6\x0d\x15\x96\x1e\x53\x6f\xee\x77\x39\x73\x1e\x01\x55\xc5\x73\x24\x7f\x72\xdd\x86\xd9\x19\xcc\x07\xac\x55\x15\x78\x43\xdf\x92\x29\x33\x17\xf7\x2d\x7c\x77\xf0\x9e\xc1\x7f\x87\x7e\x8c\xad\xa5\xfc\x5e\xd2\x8b\xc9\x39\x17\xf4\x6f\x04\x2d\xac\x77\x5c\x20\xd5\x5b\xa1\x1e\x86\xf8\x1f\x96\xd9\x6c\x8a\x38\x6c\xc1\x6f\x9e\x1b\x9a\x93\x74\x36\x71\x77\xee\xc1\xd6\xa8\xcb\x1e\x4a\xeb\x98\x10\xa1\xea\x16\x9c\x41\x2f\x5d\xa9\x24\x42\x2c\x56\x90\x45\x46\x39\x97\xcd\xdb\xf1\x98\x30\x74\x48\x73\x0d\xde\xd0\x20\x8e\xe9\x8e\x5b\x67\x63\x96\x86\xa7\x0a\x1c\xb1\xf9\xce\xa9\x5d\x54\x5a\x19\x87\xd1\xe0\x4b\x7f\x34\x3a\x19\x6c\xa4\xe9\x72\x99\xd1\xdd\x21\xba\x24\x1a\x0f\x1c\x9f\x20\x19\x7b\xb9\x5a\x45\x4d\xca\xed\xb7\x6b\x4b\xc4\xe9\xfa\x84\xd3\x66\x7c\xad\xcb\x94\x77\x55\xd5\xb0\xac\x56\x75\xb8\x4d\x5f\xda\x35\xa3\xd7\x3a\x37\x68\xbb\x17\x55\x55\xd7\x90\xf5\xc2\x35\xc1\xea\xbf\xab\x55\xd4\x6a\x1f\xcf\x83\xfc\x7b\x3b\x01\x7e\xa8\x6b\xc7\xc6\xad\x6e\x7e\x3b\x5a\x0d\xfd\xee\x68\x6d\x03\x6e\xd7\xce\x03\xe6\xb6\x86\x87\x74\x4d\xce\x7f\x07\x00\x00\xff\xff\x74\x8c\x07\xdf\x4e\x09\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

