// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5d\x8b\xdb\x46\x14\x7d\x9f\x5f\x71\xb0\x5f\x12\xf0\xca\x49\x0a\x2d\xa4\x21\x54\x5d\xdb\x89\x9a\x5d\xd9\xc8\x32\x8b\x09\x79\x18\x4b\x57\xd2\x74\xa5\x19\x75\xe6\xce\x0a\x63\xfc\xdf\xcb\xc8\x9b\x6e\x13\x96\xe4\x49\x9a\xfb\x75\xce\xb9\x1f\x53\x31\xc5\xc2\x14\xf7\x64\x2b\xd5\x92\x08\xcf\x6b\xd3\x1f\xad\xaa\x1b\xc6\x8b\xe2\x25\xde\xbc\x7a\xfd\xeb\xd5\x9b\x57\xaf\x7f\xc3\x5f\x5e\xf7\xa4\xf0\x49\x0e\xb2\x33\x6c\xc6\xd8\xbc\x51\x0e\x21\x13\xca\xa1\x97\x96\x61\x2a\x64\x46\x96\x8a\xf0\x8f\x27\x4f\xe8\xa4\x96\x35\xd9\x68\x0c\x7f\xce\x13\x32\x2b\x4b\x04\x67\x2a\x1e\xa4\xa5\xb7\x38\x1a\x8f\x42\x6a\x58\x2a\x95\x63\xab\x0e\x9e\x09\x8a\x21\x75\x39\x37\x16\x9d\x29\x55\x75\x14\xd3\x60\xf2\xba\x24\x0b\x6e\x08\x4c\xb6\x73\x01\x3e\x3c\x3e\xa4\x3b\x7c\x20\x4d\x56\xb6\xd8\xf8\x43\xab\x0a\xdc\xa8\x82\xb4\x23\x48\x87\x3e\x58\x5c\x43\x25\x0e\xa1\x4c\x48\x58\x05\x06\xdb\x47\x06\x58\x19\xaf\x4b\xc9\xca\xe8\x19\x48\x71\x43\x16\x0f\x64\x9d\x32\x1a\xbf\x7c\x85\x78\xac\x37\x83\xb1\x62\x8a\x17\x92\x03\x6d\x0b\xd3\x87\xb4\x97\x90\xfa\x88\x56\xf2\x53\xe6\x8f\x3b\xf0\x24\xb4\x84\xd2\x23\x40\x63\x7a\x02\x37\x92\x83\xce\x41\xb5\x2d\x0e\x04\xef\xa8\xf2\xed\x4c\x4c\x71\xf0\x8c\xbb\x24\xff\xb8\xde\xe5\x88\xd3\x3d\xee\xe2\x2c\x8b\xd3\x7c\xff\x3b\x06\xc5\x8d\xf1\x0c\x7a\xa0\x4b\x25\xd5\xf5\xad\xa2\x12\x83\xb4\x56\x6a\x3e\xc2\x54\x62\x8a\xdb\x65\x76\xfd\x31\x4e\xf3\xf8\xcf\xe4\x26\xc9\xf7\x30\x16\xab\x24\x4f\x97\xdb\x2d\x56\xeb\x0c\x31\x36\x71\x96\x27\xd7\xbb\x9b\x38\xc3\x66\x97\x6d\xd6\xdb\x65\x04\x6c\x29\x90\x22\x31\xfd\x51\x8f\xab\x71\x4a\x96\x50\x12\x4b\xd5\xba\x8b\xf6\xbd\xf1\x70\x8d\xf1\x6d\x89\x46\x3e\x10\x2c\x15\xa4\x1e\xa8\x84\x44\x61\xfa\xe3\xcf\x67\x27\xa6\x90\xad\xd1\xf5\xa8\xf0\xf9\x35\x43\x52\x41\x1b\x9e\xc1\x11\xe1\x5d\xc3\xdc\xbf\x9d\xcf\x87\x61\x88\x6a\xed\x23\x63\xeb\x79\x7b\x29\xe5\xe6\xef\x03\xa9\xaf\x2b\xcc\xd4\xf5\x61\x5a\x61\x14\x12\xe5\x7f\x07\x81\xa1\x51\x45\x03\xa5\x1d\xcb\xb6\x75\x90\x3d\xa3\x97\xc5\xbd\xac\x69\x14\xb5\xca\xd6\xb7\x38\x9d\xa2\xa4\x93\x35\x9d\xcf\xe2\x36\x4e\xd2\x3c\x4e\xd2\x65\xf6\xfd\xb9\xe0\xdd\xfd\xe3\x5f\xf4\xf7\xe8\xf9\xa3\xee\xa4\x6a\xa3\xc2\x74\xef\x03\x8d\xe4\x02\xf1\x0d\x02\x5c\x4f\x85\xaa\xd4\xd3\x4e\xb8\xc2\xaa\x9e\x2f\x17\xc7\x26\x2c\x84\xf5\x3a\x12\xa7\xd3\xd8\x91\x28\xde\xe4\xe7\xb3\xc8\x76\x69\x28\x73\x55\x13\xc3\xf7\xa5\x64\x12\xa7\x93\x95\xba\x26\x44\xdf\xb9\x1f\x85\xe1\xea\x18\x54\x9c\xcf\xe2\x74\x22\x5d\xfe\xef\x2b\xee\xd6\xd9\xa7\x45\x92\x61\x5e\x4a\x96\x22\x5e\x2c\x10\xd9\xb1\xf1\x73\xd2\x6c\x8f\xbd\x51\x9a\x23\xd7\x60\x6e\x8d\xe1\x6f\x6d\x62\x99\xe6\xd9\x7e\xb3\x4e\xd2\x1c\x9f\x27\x07\xe9\x9a\xc9\x0c\x93\x67\x02\x27\x5f\xc4\xf5\xed\x02\x9f\x27\x93\x2f\xe2\xdf\x00\x00\x00\xff\xff\x36\x04\xed\x4d\x91\x04\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\xdf\x4f\x1b\x47\x10\xc7\xdf\xef\xaf\xf8\x06\x5b\x09\x54\xdc\x39\xa4\x0f\x95\x48\x41\x75\x1d\x20\x6e\x5d\x82\x6c\xa3\x88\x46\x51\xb4\xbe\x9b\xbb\x5b\x65\xbd\xbb\xd9\x1f\x18\x73\xf5\xff\x5e\xed\xdd\xf9\x07\x04\xd1\xaa\x4f\x7d\x82\x9d\x9d\xf9\xcc\xcc\xce\xf7\xc6\x9d\x17\xbd\x19\x97\xbd\x19\xb3\x65\xd4\x89\x3a\x20\xe9\xcc\x52\x2b\x2e\x5d\xd2\x5a\x06\x4a\x2f\x0d\x2f\x4a\x87\xfd\xf4\x00\x6f\x5e\x1f\xfd\x84\xdf\xbc\xd4\xc4\xf1\x3b\x5b\xb0\xb9\x72\xaa\x76\x9b\x96\xdc\x22\xe7\x82\xc0\x2d\x34\x33\x0e\x2a\xc7\x58\xb1\x8c\x13\xbe\x79\xf2\x84\x39\x93\xac\x20\x93\xd4\xee\x4f\xdd\x84\xc8\xdc\x10\xc1\xaa\xdc\x2d\x98\xa1\x63\x2c\x95\x47\xca\x24\x0c\x65\xdc\x3a\xc3\x67\xde\x11\xb8\x03\x93\x59\x4f\x19\xcc\x55\xc6\xf3\x65\xd4\x09\x26\x2f\x33\x32\x70\x25\xc1\x91\x99\xdb\x90\x3e\x1c\x2e\x2e\xaf\x71\x41\x92\x0c\x13\xb8\xf2\x33\xc1\x53\x8c\x78\x4a\xd2\x12\x98\x85\x0e\x16\x5b\x52\x86\x59\xc0\x84\x80\xf3\x50\xc1\xa4\xad\x00\xe7\xca\xcb\x8c\x39\xae\xe4\x21\x88\xbb\x92\x0c\x6e\xc9\x58\xae\x24\x7e\x5c\xa7\x68\x79\x87\x50\x26\xea\x60\x9f\xb9\x50\xb6\x81\xd2\x21\xec\x00\x4c\x2e\x21\x98\xdb\x46\x3e\xff\x02\xdb\x46\x33\x70\x59\x27\x28\x95\x26\xb8\x92\xb9\xd0\xe7\x82\x0b\x81\x19\xc1\x5b\xca\xbd\x38\x8c\x3a\x98\x79\x87\x8f\xc3\xe9\xfb\x0f\xd7\x53\xf4\x2f\x6f\xf0\xb1\x3f\x1e\xf7\x2f\xa7\x37\x6f\xb1\xe0\xae\x54\xde\x81\x6e\xa9\x21\xf1\xb9\x16\x9c\x32\x2c\x98\x31\x4c\xba\x25\x54\x1e\x75\xf0\xc7\xd9\x78\xf0\xbe\x7f\x39\xed\xff\x3a\x1c\x0d\xa7\x37\x50\x06\xe7\xc3\xe9\xe5\xd9\x64\x82\xf3\x0f\x63\xf4\x71\xd5\x1f\x4f\x87\x83\xeb\x51\x7f\x8c\xab\xeb\xf1\xd5\x87\xc9\x59\x02\x4c\x28\x14\x45\x51\xe7\xb9\x37\xce\xeb\x29\x19\x42\x46\x8e\x71\x61\x9b\xde\x6f\x94\x87\x2d\x95\x17\x19\x4a\x76\x4b\x30\x94\x12\xbf\xa5\x0c\x0c\xa9\xd2\xcb\x7f\x9e\x5d\xd4\x01\x13\x4a\x16\x75\x87\x4f\xcb\x0c\xc3\x1c\x52\xb9\x43\x58\x22\xfc\x5c\x3a\xa7\x8f\x7b\xbd\xc5\x62\x91\x14\xd2\x27\xca\x14\x3d\xd1\xa0\x6c\xef\x34\x14\xb5\x96\xb0\xa3\xb9\x0e\xd3\x0a\xa3\x60\x72\xe7\x7b\x08\x45\x31\x64\x2a\xfd\x4a\x06\xa9\x92\x8e\x71\x19\x04\xa7\x40\x77\x94\x06\x5d\x1a\x2f\x61\x1d\xe9\xba\x49\x9e\xe3\xd3\x27\x74\x3b\x78\x71\x82\xd7\xf8\xfc\xf9\x6d\xe8\x48\x46\xa8\xbd\xd1\xfd\x25\xca\x79\x14\xd1\x9d\x33\x2c\x75\x5f\xee\xb9\xde\x3f\xa8\xc2\x65\x5a\x2a\xec\x5d\xcb\x7b\xae\x35\x97\x05\xba\x47\x7b\x11\xe0\xc3\x19\xb1\x42\x9c\xa1\xbb\x9f\x71\x23\xd9\x9c\xd0\x3d\x3a\x40\xf7\x28\x02\xcc\x3c\xfc\x5d\x45\x91\x97\x9a\xa5\x5f\xbf\x38\x66\x8a\xfb\x87\xbc\x60\xdf\xf2\xf6\xd3\xc7\x9c\x97\x2f\xe1\x98\x41\x7c\x7f\x77\x9b\x07\xc3\xd3\xd4\xff\xc6\x7c\x02\x59\x55\xf5\xdc\x92\x0b\xee\x56\xab\x0d\x72\x20\x94\x0c\xc0\x82\x3b\x18\xd2\xca\x72\xa7\xcc\x12\x55\x95\xac\x56\x21\x45\xb0\xa7\x42\x49\x6a\x4c\x48\xa2\xaa\x22\x99\xad\x6a\xa0\x61\xb2\x20\x24\xef\xd4\x42\x0a\xc5\x32\xbb\xc3\x5d\xdb\x02\xbb\xaa\x92\x89\x49\x1b\x5e\x3b\xa2\xfd\xd4\x1b\x81\x78\x88\xf8\x3d\x5e\xf5\xd3\x94\xb4\x8b\xcf\x64\xaa\x82\xff\x31\x8a\x7b\xae\x0f\x33\xca\x83\x26\x5e\x6d\xc2\xf1\xe6\xb4\x97\xd1\x6d\x4f\x7a\x21\xf0\x17\x0a\x43\x1a\x7b\x03\x25\x1d\xc9\x6d\xf0\xde\xe6\x26\x40\xc2\x69\x91\x22\x16\x07\x38\x39\xc1\xd1\xae\x24\x80\xa6\x84\x51\x98\x71\xcf\xcd\x75\x2f\x04\x68\xca\xea\x7d\xba\xce\x59\x3b\x16\xb5\x12\xb2\x74\xc7\x6d\xed\x77\x1a\x3c\xdf\x91\x6d\x9f\x54\x58\x7a\x8c\xde\xdc\xef\x32\x73\x1e\x01\x55\xc5\x73\x24\x7f\x72\xdd\xa6\xd9\x11\xe6\x03\x6a\x55\x05\x6e\x78\xb9\x64\xca\xcc\xc5\x7d\xeb\xbe\x2b\xbc\x67\xfc\xbf\xf3\x7e\xec\x5b\x0f\xf3\xfb\xa1\x5e\x4c\xce\xb9\xa0\x7f\x33\xd2\xc2\x7a\xc7\x05\x52\xbd\x9d\xd4\xc3\x14\xff\xc3\x36\x1b\x19\xc6\x61\x0b\x7e\xf3\xdc\xd0\x9c\xa4\xb3\x89\xbb\x73\x0f\xb6\x46\xdd\xf6\x50\x5a\xc7\x84\x08\x5d\xb7\xce\x19\xf4\xd2\x95\x4a\x22\xe4\x62\x05\x59\x64\x94\x73\xd9\xfc\x76\x3c\x06\x86\x17\xd2\x5c\x83\x37\x18\xc4\x31\xdd\x71\xeb\x6c\xcc\xd2\xf0\x53\x05\x8e\xd8\x7c\x17\xd4\x2e\x2a\xad\x8c\xc3\x68\xf0\xa5\x3f\x1a\x9d\x0c\xa2\xa6\x9c\xb1\x97\xf5\x07\x9b\xaa\xf9\x9c\xc9\xcc\xd6\x39\xc3\x12\xa4\x9a\xb7\xb7\x99\x60\x97\xcb\x8c\xee\x0e\xd1\x25\xd1\x80\x71\x7c\x82\x64\xec\xe5\x6a\xd5\xa2\xda\x8f\xdc\x96\x88\xd3\xf5\x09\xa7\x8d\xca\xad\xcb\x94\x77\x55\xd5\x50\x56\xab\xba\xaa\xcd\xf3\xb5\xeb\x48\xaf\xe5\xd0\x78\xdb\x90\xbc\x6b\xc8\x7a\xe1\x9a\x64\xf5\xbf\xab\x55\xd4\x4a\x24\x9e\x07\x95\xec\xed\x24\xf8\xa1\x7e\x22\x6c\xc2\xea\x19\xb5\x0a\x6c\xf0\xbb\x0a\xdc\x26\xdc\xee\xa7\x07\xe4\xb6\x87\x87\xb8\xa6\xe6\xbf\x03\x00\x00\xff\xff\x3b\x40\xb0\xba\x75\x09\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

