// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x71\x6f\xdb\xb6\x13\xfd\x5f\x9f\xe2\xc1\x06\x8a\x16\x48\xe4\xa4\x3f\xfc\x36\xa0\x6b\x83\xa9\xb1\x9d\x6a\xad\x65\x43\x96\x57\x04\x49\x10\xd0\xd4\x49\xe2\x4a\x93\x1c\x79\xb2\x61\x18\xfe\xee\x83\x94\xb4\x69\x87\xa0\xfb\x4f\x77\xe4\xbd\x7b\xef\x1d\x4f\xc3\x68\x88\xb1\x95\x5f\xc8\x57\x4a\x53\xd4\x85\x97\xd6\xed\xbd\xaa\x1b\xc6\x4b\xf9\x0a\xaf\xcf\xce\x7f\x39\x7d\x7d\x76\xfe\x2b\xfe\x68\x8d\x23\x85\x8f\x62\x27\x36\x96\x6d\x7f\xb7\x68\x54\x40\x57\x09\x15\xe0\x84\x67\xd8\x0a\xb9\x15\xa5\x22\xfc\xdd\x52\x4b\xd8\x08\x23\x6a\xf2\x71\x7f\xfd\xb9\x93\xae\xb2\xf2\x44\x08\xb6\xe2\x9d\xf0\xf4\x06\x7b\xdb\x42\x0a\x03\x4f\xa5\x0a\xec\xd5\xba\x65\x82\x62\x08\x53\x8e\xac\xc7\xc6\x96\xaa\xda\x47\xc3\x2e\xd5\x9a\x92\x3c\xb8\x21\x30\xf9\x4d\xe8\xda\x77\xc1\x55\xb6\xc2\x15\x19\xf2\x42\x63\xd1\xae\xb5\x92\xf8\xa4\x24\x99\x40\x10\x01\xae\xcb\x84\x86\x4a\xac\x3b\x98\xae\x60\xda\x31\x58\x3e\x32\xc0\xd4\xb6\xa6\x14\xac\xac\x39\x01\x29\x6e\xc8\x63\x4b\x3e\x28\x6b\xf0\xbf\xaf\x2d\x1e\xf1\x4e\x60\x7d\x34\xc4\x4b\xc1\x1d\x6d\x0f\xeb\xba\xb2\x57\x10\x66\x0f\x2d\xf8\xa9\xf2\xe7\x0e\x3c\x09\x2d\xa1\x4c\xdf\xa0\xb1\x8e\xc0\x8d\xe0\x4e\xe7\x4e\x69\x8d\x35\xa1\x0d\x54\xb5\xfa\x24\x1a\x62\xdd\x32\x3e\xa7\xc5\x87\xf9\xaa\x40\x92\x5d\xe3\x73\x92\xe7\x49\x56\x5c\xff\x86\x9d\xe2\xc6\xb6\x0c\xda\xd2\x03\x92\xda\x38\xad\xa8\xc4\x4e\x78\x2f\x0c\xef\x61\xab\x68\x88\xd9\x24\xbf\xfc\x90\x64\x45\xf2\x3e\xfd\x94\x16\xd7\xb0\x1e\xd3\xb4\xc8\x26\xcb\x25\xa6\xf3\x1c\x09\x16\x49\x5e\xa4\x97\xab\x4f\x49\x8e\xc5\x2a\x5f\xcc\x97\x93\x18\x58\x52\x47\x8a\xa2\xe1\xcf\x3c\xae\xfa\x29\x79\x42\x49\x2c\x94\x0e\x0f\xda\xaf\x6d\x8b\xd0\xd8\x56\x97\x68\xc4\x96\xe0\x49\x92\xda\x52\x09\x01\x69\xdd\xfe\xbf\x67\x17\x0d\x21\xb4\x35\x75\xaf\xf0\xf9\x67\x86\xb4\x82\xb1\x7c\x82\x40\x84\xb7\x0d\xb3\x7b\x33\x1a\xed\x76\xbb\xb8\x36\x6d\x6c\x7d\x3d\xd2\x0f\x50\x61\x74\xd1\x91\xfa\xfa\x84\x99\x36\xae\x9b\x56\x37\x0a\x81\xf2\xdb\x42\x60\xd7\x28\xd9\x40\x99\xc0\x42\xeb\x00\xe1\x18\x4e\xc8\x2f\xa2\xa6\x5e\xd4\x34\x9f\xcf\x70\x38\xc4\xe9\x46\xd4\x74\x3c\x46\xb3\x24\xcd\x8a\x24\xcd\x26\xf9\xbf\xd7\x05\x6f\xbf\x3c\x7e\xc5\x7f\xf5\x27\xbf\xd7\x1b\xa1\x74\x2c\xed\xe6\x22\x8a\x26\xd9\x9f\x28\x26\xf9\x0c\x5b\x3e\x3f\x3b\xeb\xc3\xf1\xe4\x7d\x9a\x64\xf7\xd3\x7c\x9e\x15\x93\x6c\x0c\x63\x8d\x32\x4c\x5e\x48\x56\x5b\xea\x98\xa7\x0f\xac\x60\x48\x52\x08\xc2\xef\xbf\x51\x8b\xf2\x55\xd6\x71\x3d\xad\x89\xd1\xba\xb2\x53\xf6\xe2\x05\x6e\x23\x00\xdf\xf2\x8f\xa2\x70\xba\xef\x53\x2d\x2b\x1d\x20\x5b\xaf\x51\x2b\x46\x2d\x25\xdc\x9e\x1b\x6b\x4e\x4b\xda\x42\xab\x75\x55\xa9\xfe\xf3\x31\xeb\x94\xeb\xdb\x38\xe5\x9e\xa0\x56\x7d\x58\x87\x0e\xac\x3f\x25\xd9\x58\x0c\x6e\xae\xac\xad\x35\x5d\xda\x8d\x6b\x99\xee\x6e\x4d\x20\xbf\x55\x92\xee\x85\x94\xb6\x35\x8c\x77\x28\xa9\x12\xad\xe6\x5b\x73\x73\xb5\x5c\xb1\xd2\x77\xb7\xc6\x09\x2f\xb4\x26\x7d\x2f\xed\xc6\xd9\xa0\x98\xee\x5b\xa7\xad\x28\xef\xb9\xf1\x14\x1a\xab\x4b\xbc\xc3\xf9\xff\xcf\x66\x03\x5c\x5c\x60\x44\x2c\x47\xeb\xce\x60\x59\xd5\xdf\xfb\xf3\xfd\xd0\x10\x1c\x49\x55\xa9\xa7\x35\x0b\xd2\x2b\xc7\x0f\x3f\x31\xb6\xdd\x8e\xf9\xd6\xc4\xd1\xe1\xe0\x85\xa9\x09\x71\xb2\x28\x8e\xc7\x1f\x0c\xfd\xce\xb8\xc3\x21\x3e\x1e\xa3\xc3\x81\x4c\x79\x3c\x46\xd1\xe7\x79\xfe\x71\x9c\xe6\x18\x95\x82\x45\x94\x8c\xc7\x88\x7d\xff\x4a\x47\x64\xd8\xef\x9d\x55\x86\xe3\xd0\x60\xe4\xad\xe5\x1f\x73\xd1\x24\x2b\xf2\xeb\xc5\x3c\xcd\x0a\xdc\x0c\xd6\x22\x34\x83\x13\x0c\x9e\xb9\x38\xb8\x8b\x2e\x67\x63\xdc\x0c\x06\x77\xd1\x3f\x01\x00\x00\xff\xff\xc3\x2d\x87\x95\xbe\x05\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\x5d\x6f\xdb\x36\x14\x86\xef\xf5\x2b\xde\xc6\x46\x9b\x0c\x91\xdc\x74\x17\x03\xd2\x25\x98\xe7\x26\xa9\x37\x2f\x0d\x6c\x07\x45\x56\x14\x05\x2d\x1d\x49\x44\x69\x92\xe5\x47\x1c\x47\xf3\x7f\x1f\x28\xc9\xb1\x9d\x06\xd9\xb0\xab\x5d\x19\x3c\x3c\xe7\x39\x1f\xef\x31\xd5\x79\xd1\x9b\x71\xd9\x9b\x31\x5b\x46\x9d\xa8\x03\x92\xce\x2c\xb5\xe2\xd2\x25\xad\x65\xa0\xf4\xd2\xf0\xa2\x74\xd8\x4f\x0f\xf0\xe6\xf5\xd1\x4f\xf8\xcd\x4b\x4d\x1c\xbf\xb3\x05\x9b\x2b\xa7\x6a\xb7\x69\xc9\x2d\x72\x2e\x08\xdc\x42\x33\xe3\xa0\x72\x8c\x15\xcb\x38\xe1\x9b\x27\x4f\x98\x33\xc9\x0a\x32\x49\xed\xfe\xd4\x4d\x88\xcc\x0d\x11\xac\xca\xdd\x82\x19\x3a\xc6\x52\x79\xa4\x4c\xc2\x50\xc6\xad\x33\x7c\xe6\x1d\x81\x3b\x30\x99\xf5\x94\xc1\x5c\x65\x3c\x5f\x46\x9d\x60\xf2\x32\x23\x03\x57\x12\x1c\x99\xb9\x0d\xe9\xc3\xe1\xe2\xf2\x1a\x17\x24\xc9\x30\x81\x2b\x3f\x13\x3c\xc5\x88\xa7\x24\x2d\x81\x59\xe8\x60\xb1\x25\x65\x98\x05\x4c\x08\x38\x0f\x15\x4c\xda\x0a\x70\xae\xbc\xcc\x98\xe3\x4a\x1e\x82\xb8\x2b\xc9\xe0\x96\x8c\xe5\x4a\xe2\xc7\x75\x8a\x96\x77\x08\x65\xa2\x0e\xf6\x99\x0b\x65\x1b\x28\x1d\xc2\x0e\xc0\xe4\x12\x82\xb9\x4d\xe4\xf3\x13\xd8\x34\x9a\x81\xcb\x3a\x41\xa9\x34\xc1\x95\xcc\x85\x3e\x17\x5c\x08\xcc\x08\xde\x52\xee\xc5\x61\xd4\xc1\xcc\x3b\x7c\x1c\x4e\xdf\x7f\xb8\x9e\xa2\x7f\x79\x83\x8f\xfd\xf1\xb8\x7f\x39\xbd\x79\x8b\x05\x77\xa5\xf2\x0e\x74\x4b\x0d\x89\xcf\xb5\xe0\x94\x61\xc1\x8c\x61\xd2\x2d\xa1\xf2\xa8\x83\x3f\xce\xc6\x83\xf7\xfd\xcb\x69\xff\xd7\xe1\x68\x38\xbd\x81\x32\x38\x1f\x4e\x2f\xcf\x26\x13\x9c\x7f\x18\xa3\x8f\xab\xfe\x78\x3a\x1c\x5c\x8f\xfa\x63\x5c\x5d\x8f\xaf\x3e\x4c\xce\x12\x60\x42\xa1\x28\x8a\x3a\xcf\xcd\x38\xaf\x55\x32\x84\x8c\x1c\xe3\xc2\x36\xbd\xdf\x28\x0f\x5b\x2a\x2f\x32\x94\xec\x96\x60\x28\x25\x7e\x4b\x19\x18\x52\xa5\x97\xff\xac\x5d\xd4\x01\x13\x4a\x16\x75\x87\x4f\xaf\x19\x86\x39\xa4\x72\x87\xb0\x44\xf8\xb9\x74\x4e\x1f\xf7\x7a\x8b\xc5\x22\x29\xa4\x4f\x94\x29\x7a\xa2\x41\xd9\xde\x69\x28\x6a\xbd\xc2\x8e\xe6\x3a\xa8\x15\xa4\x60\x72\xeb\xff\x10\x8a\x62\xc8\x54\xfa\x95\x0c\x52\x25\x1d\xe3\x32\x2c\x9c\x02\xdd\x51\x1a\xf6\xd2\x78\x09\xeb\x48\xd7\x4d\xf2\x1c\x9f\x3e\xa1\xdb\xc1\x8b\x13\xbc\xc6\xe7\xcf\x6f\x43\x47\x32\x42\xed\x8d\xee\x2f\x51\xce\xa3\x88\xee\x9c\x61\xa9\xfb\x72\xcf\xf5\xfe\x41\x15\x2e\xd3\x52\x61\xef\x5a\xde\x73\xad\xb9\x2c\xd0\x3d\xda\x8b\x00\x1f\xce\x88\x15\xe2\x0c\xdd\xfd\x8c\x1b\xc9\xe6\x84\xee\xd1\x01\xba\x47\x11\x60\xe6\xe1\x77\x15\x45\x5e\x6a\x96\x7e\xfd\xe2\x98\x29\xee\x77\x79\xc1\xbe\xe1\x75\xf7\xd3\xc7\xa0\x97\x2f\xe1\x98\x41\x7c\x7f\x77\x9b\x07\xc3\xd3\xd8\xff\x08\x7d\x82\x59\x55\xb5\x72\xc9\x05\x77\xab\xd5\x03\x73\x20\x94\x0c\xc4\x82\x3b\x18\xd2\xca\x72\xa7\xcc\x12\x55\x95\xac\x56\x21\x47\xb0\xa7\x42\x49\x6a\x4c\x48\xa2\xaa\x22\x99\xad\x6a\xa0\x61\xb2\x20\x24\xef\xd4\x42\x0a\xc5\x32\xbb\xc5\x5d\xdb\x02\xbb\xaa\x92\x89\x49\x1b\x5e\x2d\x52\x77\x3f\xf5\x46\x20\x1e\x22\x7e\x8f\x57\xfd\x34\x25\xed\xe2\x33\x99\xaa\xe0\x7e\x8c\xe2\x9e\xeb\xc3\x8c\xf2\xb0\x14\xaf\x1e\xa2\xf1\xe6\xb4\x97\xd1\x6d\x4f\x7a\x21\xf0\x17\x0a\x43\x1a\x7b\x03\x25\x1d\xc9\x4d\xf0\xde\xc3\x4d\x80\x84\xd3\x22\x45\x2c\x0e\x70\x72\x82\xa3\xad\x95\x00\x9a\x0a\x46\x41\xe3\x9e\x9b\xeb\x5e\xf0\xd7\x94\xd5\xef\xe9\x3a\x65\xed\x58\xd4\x9b\x90\xa5\x5b\x6e\x6b\xbf\xd3\xe0\xf9\x8e\x6c\x3b\x50\x61\xe9\x31\xfa\xe1\x7e\x9b\x99\xf3\x08\xa8\x2a\x9e\x23\xf9\x93\xeb\x36\xcd\xd6\x62\xee\x50\xab\x2a\x70\xc3\xdc\x92\x29\x33\x17\xf7\xad\xfb\xf6\xe2\x3d\xe3\xff\x9d\xf7\x63\xdf\x5a\xca\xef\x25\xbd\x98\x9c\x73\x41\xff\x46\xd0\xc2\x7a\xc7\x05\x52\xbd\x11\x6a\x37\xc5\xff\xb0\xcd\xe6\xa5\x88\xc3\x2b\xf8\xcd\x73\x43\x73\x92\xce\x26\xee\xce\xed\xbc\x1a\x75\xdb\x43\x69\x1d\x13\x22\x74\xdd\x3a\x67\xd0\x4b\x57\x2a\x89\x90\x8b\x15\x64\x91\x51\xce\x65\xf3\xed\x78\x0c\x0c\x13\xd2\x5c\x83\x37\x18\xc4\x31\xdd\x71\xeb\x6c\xcc\xd2\xf0\xa9\x02\x47\x6c\xbe\x0b\x6a\x1f\x2a\xad\x8c\xc3\x68\xf0\xa5\x3f\x1a\x9d\x0c\x1e\xa4\xe9\x72\x99\xd1\xdd\x21\xba\x24\x9a\x08\x1c\x9f\x20\x19\x7b\xb9\x5a\x45\x4d\xc9\xed\x7f\xd7\x96\x88\xd3\xf5\x09\xa7\xcd\xfa\x5a\x97\x29\xef\xaa\xaa\xa1\xac\x56\x75\xba\x87\xb9\xb4\xcf\x8c\x5e\xeb\xdc\x78\xdb\xbd\xa8\x15\x39\x9e\x07\x9d\xf7\xb6\x48\x3f\xd4\x4d\x86\x69\x8f\xc9\x7a\xe1\xea\x29\xb7\x3b\xd4\x70\xb6\x77\x68\x43\xde\xbc\x2f\x3b\xe4\xb6\xd8\x5d\x5c\x53\xdc\xdf\x01\x00\x00\xff\xff\x5b\x0f\xa1\xeb\x37\x09\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

